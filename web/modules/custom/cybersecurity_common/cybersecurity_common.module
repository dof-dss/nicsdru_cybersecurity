<?php

/**
 * @file
 * Contains cybersecurity_common.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Bytes;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_form_alter().
 *
 * Edits the description on the linkit_editor_dialog_form.
 */
function cybersecurity_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $description = "Start typing to find internal content or to insert an email address. To add an external link paste the full URL (e.g. http://www.example.com).";

  if ($form_id == "linkit_editor_dialog_form") {
    $form['attributes']['href']['#description'] = t($description);
  }
}

/**
 * Implements hook_js_settings_alter().
 *
 * Edits format tags in CKEditor to remove the option to include Heading 1.
 */
function cybersecurity_common_js_settings_alter(array &$settings) {
  if (isset($settings['editor']['formats'])) :
    foreach ($settings['editor']['formats'] as $index => $text_filter) {
      $settings['editor']['formats'][$index]['editorSettings']['format_tags'] = "p;h2;h3;h4;h5;h6;pre";
    }
  endif;
}

/**
 * Generates a string representation for the given byte count.
 *
 * @param $size
 *   A size in bytes.
 * @param $langcode
 *   Optional language code to translate to a language other than what is used
 *   to display the page.
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 *   A translated string representation of the size.
 */
function cyber_format_size($size, $langcode = NULL) {
  $absolute_size = abs($size);
  if ($absolute_size < Bytes::KILOBYTE) {
    return \Drupal::translation()->formatPlural($size, '1 byte', '@count bytes', [], ['langcode' => $langcode]);
  }
  // Create a multiplier to preserve the sign of $size.
  $sign = $absolute_size / $size;
  foreach (['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] as $unit) {
    $absolute_size /= Bytes::KILOBYTE;
    $rounded_size = round($absolute_size, 1);
    if ($rounded_size < Bytes::KILOBYTE) {
      break;
    }
  }
  $args = ['@size' => $rounded_size * $sign];
  $options = ['langcode' => $langcode];
  switch ($unit) {
    case 'KB':
      return new TranslatableMarkup('@size KB', $args, $options);

    case 'MB':
      return new TranslatableMarkup('@size MB', $args, $options);

    case 'GB':
      return new TranslatableMarkup('@size GB', $args, $options);

    case 'TB':
      return new TranslatableMarkup('@size TB', $args, $options);

    case 'PB':
      return new TranslatableMarkup('@size PB', $args, $options);

    case 'EB':
      return new TranslatableMarkup('@size EB', $args, $options);

    case 'ZB':
      return new TranslatableMarkup('@size ZB', $args, $options);

    case 'YB':
      return new TranslatableMarkup('@size YB', $args, $options);
  }
}
