<?php

/**
 * @file
 * Functions to support theming in the cybersecurity theme.
 */

use Drupal\block\Entity\Block;
use Drupal\file\Entity\File;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_preprocess_HOOK().
 */
function tailwindcss_preprocess_block(&$variables) {
  if (tailwindcss_get_active_theme() == 'tailwindcss' && $variables['base_plugin_id'] == 'system_branding_block') {
    $variables['site_logo'] = '';
    if ($variables['content']['site_logo']['#access'] && $variables['content']['site_logo']['#uri']) {
      $variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
    }
  }
}

/**
 * Get the active theme.
 *
 * @return string
 *   The name of the active theme.
 */
function tailwindcss_get_active_theme() {
  return \Drupal::service('theme.manager')->getActiveTheme()->getName();
}

/**
 * Implements hook_preprocess_field().
 * Changing the publication field label for Publication search page.
 */
function cybersecurity_preprocess_field(&$variables) {
  $content_types = ['publication', 'news'];
  foreach ($content_types as $content_type) {
    // Check if the field label in the correct view mode and content type.
    if ($variables['element']['#bundle'] == $content_type && $variables['element']['#view_mode'] == 'search_result_with_snippet') {
      $variables['label'] = t('Published') . ': ';
    }
  }
  if ($variables['element']['#bundle'] == 'publication' && $variables['element']['#view_mode'] == 'full') {
    $variables['label'] = t('Date') . ': ';
  }
}

/**
 * Implements hook_preprocess_views_view() for views_view.
 * Adding a singular/pluralised result count in the header of the publication search page.
 *
 * @RenderElement("html_tag");
 */
function cybersecurity_preprocess_views_view(array &$variables) {

  // Check the view name.
  if ($variables['id'] == 'publication_search_api') {

    // Ensure the search has items in an array.
    if (!empty($variables['rows'])) {

      // Count the number of publications in the array.
      $number_of_publications = count($variables['rows'][0]['#rows']);

      // Singular expression if only 1, if more pluralise.
      $header_text = ($number_of_publications == 1) ? 'publication' : 'publications';

      // Output the result.
      $variables['header']['result'] = [
        '#type' => 'html_tag',
        '#tag' => 'h3',
        '#value' => t('@item_count @header_text',
          [
            '@item_count' => $number_of_publications,
            '@header_text' => $header_text,
          ]),
      ];
    }
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Pass block region value to content so this can be used in
 * cybersecurity_theme_suggestions_menu_alter.
 */
function cybersecurity_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $region = Block::load($variables['elements']['#id'])->getRegion();
    $variables['content']['#attributes']['region'] = $region;
  }
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 *
 * Provide region based menu suggestions.
 */
function cybersecurity_theme_suggestions_menu_alter(&$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $suggestions[] = 'menu__' . $variables['menu_name'] . '__' . $variables['attributes']['region'];
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Provide content type based page suggestions.
 */
function cybersecurity_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__content_type__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Provide item list suggestion based on whether it has a class attribute of 'list-origins-toc'.
 *
 * @param array $suggestions
 *   The list of theme suggestions for item-list.
 *
 * @param array $variables
 *   The class attributes variable.
 */
function cybersecurity_theme_suggestions_item_list_alter(array &$suggestions, array $variables) {
  $class = $variables['attributes']['class'];

  if ($class == 'list-origins-toc') {
    $suggestions[] = 'item_list__list_origins_toc';
  }
}

/**
 * Implements hook_preprocess_file_link() for file link.
 *
 * Functions to support theming and add the formatted file type and size.
 */
function cybersecurity_preprocess_file_link(&$variables) {
  $file = $variables['file'];

  $file_entity = $file instanceof File ? $file : File::load($file->fid);

  // Get file size.
  $file_size = $file->getSize();
  // Get mime type.
  $mime_type = $file->getMimeType();
  // Create file URL.
  $url = $file->createFileUrl(FALSE);
  // Format the file size.
  $format_file_size = format_size($file_size);

  // User friendly MIME types:
  switch ($mime_type) {
    case 'application/pdf':
      $file_type = 'PDF';
      break;

    case 'application/vnd.oasis.opendocument.text':
      $file_type = 'OpenDocument_Text';
      break;

    case 'application/vnd.oasis.opendocument.spreadsheet':
      $file_type = 'OpenDocument_Spreadsheet';
      break;

    case 'application/vnd.oasis.opendocument.presentation':
      $file_type = 'OpenDocument_Presentation';
      break;

    case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
    case 'application/msword':
      $file_type = 'Word';
      break;

    case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
    case 'application/vnd.ms-excel':
    case 'application/vnd.ms-excel.addin.macroEnabled.12':
    case 'application/vnd.ms-excel.sheet.binary.macroEnabled.12':
    case 'application/vnd.ms-excel.sheet.macroEnabled.12':
    case 'application/vnd.ms-excel.template.macroEnabled.12':
      $file_type = 'Excel';
      break;

    case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
    case 'application/vnd.ms-powerpoint':
      $file_type = 'PowerPoint';
      break;

    case 'application/zip':
      $file_type = 'Zip';
      break;

    case 'text/csv':
      $file_type = 'csv';
      break;

    default:
      $file_type = $mime_type;
  }

  // Add a mime type class to the link for styling and open file in a new window.
  $link_options = [
    'attributes' => [
      'class' => 'pub_icon ' . $file_type,
      'target' => '_blank',
    ]
  ];

  // Replace underscores in $file_type used for class, with a space for display.
  $file_type = str_replace('_', ' ', $file_type);
  // Set variable for the description.
  $file_description = $variables['description'];
  // Default file name if description field is empty.
  $file_default = $file_entity->getFilename();
  // Set the file type and size as a variable.
  $file_information = "<br><span>" . $file_type . ' ' . $format_file_size . "</span>";

  // Set the file name based on description field being populated.
  $file_description = empty($file_description) ? $file_default . $file_information : $file_description . $file_information;

  $file_description = Markup::create($file_description);
  // Set the link with the file size added to the description and with the mime type class.
  $variables['link'] = Link::fromTextAndUrl($file_description, Url::fromUri($url, $link_options));
}

/**
 * Adds Image Style machine name as class on images
 *
 * @param  mixed $variables
 *   Image Variables.
 */
function cybersecurity_preprocess_image(&$variables) {

  // Check Style Name is set.
  if ($variables['style_name']) {

    // Sets Image style as class with prefix for distinction.
    $variables['attributes']['class'][] = 'img_style_' . $variables['style_name'];

  }

}

/**
 * Implements hook_preprocess_responsive_image().
 *
 * Add responsive image style id as a class in the attributes array for a responsive image.
 *
 * @param array $variables
 *   Responsive image style variables.
 */
function cybersecurity_preprocess_responsive_image(array &$variables) {
  $image_style = 'img_style_' . $variables['responsive_image_style_id'];

  if ($variables['responsive_image_style_id']) {
    $variables['attributes']['class'][] = $image_style;
    $variables['attributes']['data-responsive-image-style'] = $variables['responsive_image_style_id'];
  }
}

/**
 * Implements hook_preprocess().
 *
 * Add is_front as a variable available in all templates.
 *
 * @param array $variables
 *   Variable is_front.
 */
function cybersecurity_preprocess(array &$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }

  $variables['#cache']['contexts'][] = 'url.path.is_front';
}

/**
 * Implements hook_preprocess_html.
 *
 * Add <meta http-equiv="X-UA-Compatible" content="IE=edge" /> to head.
 *
 * @param array $variables
 *   HTML head variables.
 */
function cybersecurity_preprocess_html(array &$variables) {
  $xuacompatible = [
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ],
  ];

  $variables['page']['#attached']['html_head'][] = [$xuacompatible, 'x-ua-compatible'];
}
