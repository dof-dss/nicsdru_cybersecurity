<?php

/**
 * @file
 * Functions to support theming in the Tailwind CSS theme.
 */

use Drupal\block\Entity\Block;

/**
 * Implements hook_preprocess_HOOK().
 */
function tailwindcss_preprocess_block(&$variables) {
  if (tailwindcss_get_active_theme() == 'tailwindcss' && $variables['base_plugin_id'] == 'system_branding_block') {
    $variables['site_logo'] = '';
    if ($variables['content']['site_logo']['#access'] && $variables['content']['site_logo']['#uri']) {
      $variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
    }
  }
}

/**
 * Get the active theme.
 *
 * @return string
 *   The name of the active theme.
 */
function tailwindcss_get_active_theme() {
  return \Drupal::service('theme.manager')->getActiveTheme()->getName();
}

/**
 * Implements hook_preprocess_field().
 * Changing the publication field label for Publication search page.
 */
function cybersecurity_preprocess_field(&$variables) {

  // Check if the field label in the correct view mode and content type.
  if ($variables['element']['#bundle'] == 'publication' && $variables['element']['#view_mode'] == 'search_result_with_snippet') {
    $variables['label'] = t('Published') . ': ';
  }
}

/**
 * Implements hook_preprocess_views_view() for views_view.
 * Adding a singular/pluralised result count in the header of the search page.
 *
 * @RenderElement("html_tag");
 */
function cybersecurity_preprocess_views_view(array &$variables) {

  // Check the view name.
  if ($variables['id'] == 'publication_search_api') {

    // Ensure the search has items in an array.
    if (!empty($variables['rows'])) {

      // Count the number of publications in the array.
      $number_of_publications = count($variables['rows'][0]['#rows']);

      // Singular expression if only 1, if more pluralise.
      $header_text = ($number_of_publications == 1) ? 'publication' : 'publications';

      // Output the result.
      $variables['header']['result'] = [
        '#type' => 'html_tag',
        '#tag' => 'h3',
        '#value' => t('@item_count @header_text',
          [
            '@item_count' => $number_of_publications,
            '@header_text' => $header_text,
          ]),
      ];
    }
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Pass block region value to content so this can be used in
 * cybersecurity_theme_suggestions_menu_alter.
 */
function cybersecurity_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $region = Block::load($variables['elements']['#id'])->getRegion();
    $variables['content']['#attributes']['region'] = $region;
  }
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 *
 * Provide region based menu suggestions.
 */
function cybersecurity_theme_suggestions_menu_alter(&$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $suggestions[] = 'menu__' . $variables['menu_name'] . '__' . $variables['attributes']['region'];
  }
}
